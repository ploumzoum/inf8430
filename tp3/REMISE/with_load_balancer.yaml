heat_template_version: 2013-05-23

description: TP3 partie 2 Deploiement du service web sur 2 machines virtuelles avec un load balancer

parameters:

  image:
        type: string
        description: Image utilisee pour les serveurs
        default: INF4410-Ubuntu-trusty-mini
        constraints:
            - allowed_values: [ INF4410-Ubuntu-trusty-mini ]

  flavor:
        type: string
        description: Flavor utilisee par les serveurs
        default: INF4410-mini
        constraints:    
            - allowed_values: [ INF4410-mini ]
  
  network:
      type: string
      description: Reseau pour eviter l'ambiguite a la generation
      default: inf4410-net

  subnet_id:
    type: string
    description: Sous-reseau dans lequel le load balancer sera situe
    default: 6579eb07-88c3-4707-9c6e-ab90a78cca02 
    constraints:
      - allowed_values: [ 6579eb07-88c3-4707-9c6e-ab90a78cca02 ]

  ext-net_id:
    type: string
    description: ID du reseau ext-net
    default: 0c3b1354-d3d5-4fec-86d3-19d4d1f13785

    # Vous pouvez ajouter d'autres paramètres
    # Il faut bien définir les descriptions, les valeurs par default et les contraintes

resources:
  server_nodes:
      type: OS::Heat::ResourceGroup
      properties:
          count: 2
          resource_def:
            type: https://gist.githubusercontent.com/ploumzoum/9ac5d83578ebbf84949594ea4a6be0c1/raw/bcd8b97f7b7050a1f10523a4a308b9436e410404/server.yaml
            properties:
              # create a unique name for each server
              # using its index in the group
              name: my_server_%index%
              image: {get_param: image}
              flavor: {get_param: flavor}
              network: {get_param: network}
              pool_id: {get_resource: mypool}
              user_data: |
                        #!/bin/bash
                        curl -o server.py https://raw.githubusercontent.com/houssemmh/INF8480-TP3/master/server.py
                        python server.py
                        # ...


  
  mypool:
      type: OS::Neutron::Pool
      properties:
          protocol: HTTP
          monitors: [{get_resource: mymonitor}]
          subnet_id: {get_param: subnet_id}
          lb_method: ROUND_ROBIN
          vip:
            protocol_port: 8080

  myloadbalancer:
      type: OS::Neutron::LoadBalancer
      properties:
          protocol_port: 8080
          pool_id: {get_resource: mypool}

  mymonitor:
      type: OS::Neutron::HealthMonitor
      properties:
          type: HTTP
          delay: 15
          max_retries: 5
          timeout: 5


  floatingIP:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: {get_param: ext-net_id}
      port_id: {get_attr: [mypool, vip, port_id]}

outputs:
  ip_address:
    value: {get_attr: [floatingIP, floating_ip_address]}
    description: IP address to use
